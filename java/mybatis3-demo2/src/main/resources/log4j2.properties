# https://zhuanlan.zhihu.com/p/137482711
# log4j2组建自身代码的日志级别
status = warn
log4j2.properties.status = warn
# 日志配置名称
name = ConsoleAndFileLogConfigDemo

# 属性。使用来定义常量，以便在其他配置项中引用，该配置是可选的
property.PATTERN=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
property.PATTERN_FILE=[%d{yyyy-MM-dd HH:mm:ss.SSS}]|%p|%t|%pid|%T|%l|%msg%n
property.basePath = ./
# pattern: 描述了如何格式化日志消息：
# %p: 日志级别 level 缩写形式（如 INFO 或 ERROR）
# %d{...}: 时间戳，可以根据提供的模式字符串调整日期/时间格式。
# %t: 当前线程名
# %c{1}: 记录日志的对象所属类的简单名称（最后一个点后的部分）。如果您希望得到完整的包名，请增加数字参数，例如 %c{3}
# - %m: 实际的消息文本
# %n: 表示换行
# %F 输出所在的类文件名，如Log4j2Test.java
# %L 输出行号
# %M 输出所在方法名
# %l 输出语句所在的行数, 包括类名、方法名、文件名、行数
# %T 线程id

# Appenders是定义日志输出的地方
# 设置日志输出方式的名称
appender.console.name = consoleLogger
# log4j2支持的输出源有很多，有控制台ConsoleAppender、文件FileAppender、AsyncAppender、RandomAccessFileAppender、RollingFileAppender、RollingRandomAccessFile 等
appender.console.type = Console
# 指定日志布局管理器的类型
appender.console.layout.type = PatternLayout
# 定义日志输出格式
appender.console.layout.pattern = ${PATTERN_FILE}
appender.console.layout.charset = UTF-8

# RollingFileAppender 滚动日志输出
appender.rolling.type=RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}/app.log
appender.rolling.filePattern= ${basePath}/app_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = ${PATTERN_FILE}
# RollingFileAppender
appender.rolling.policies.type = Policies
appender.rolling.policies.size.type = SizeBasedTriggeringPolicy
appender.rolling.policies.size.size = 10MB
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 10
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# 保留最近30天的日志
appender.rolling.strategy.delete.ifLastModified.age = 30d

rootLogger.appenderRef.stdout.ref = consoleLogger
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.level = info
#asyncLogger.AsyncRoot=true
#asyncLogger.AsyncRoot=true
#log4j2.asyncLogger=true
# rootLogger.appenderRef.file.ref = File
# Root logger level
#rootLogger.appenderRef.stdout.ref = STDOUT